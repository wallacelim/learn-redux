{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","AppContainer","styled","div","Row","Button","button","props","active","Input","input","StyledTable","Table","TableRow","tr","TableHeader","th","TableHead","thead","TableDesc","td","handleRemove","e","toRemove","target","getAttribute","console","log","setEntries","entries","filter","entry","useState","className","id","onClick","date","Date","dateAdded","getDate","getMonth","getFullYear","getHours","getMinutes","taskName","document","getElementById","value","status","striped","bordered","hover","map","name","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6kEAiIeA,MA5Hf,WAEI,IAAMC,EAAeC,IAAOC,IAAV,KAMZC,EAAMF,IAAOC,IAAV,KAOHE,EAASH,IAAOI,OAAV,KACM,SAAAC,GAAK,OAAIA,EAAMC,OAAS,UAAY,aACzC,SAAAD,GAAK,OAAIA,EAAMC,OAAS,UAAY,aAY3CC,EAAQP,IAAOQ,MAAV,KAQLC,EAAcT,YAAOU,IAAPV,CAAH,KAUXW,EAAWX,IAAOY,GAAV,KAORC,EAAcb,IAAOc,GAAV,KAMXC,EAAYf,IAAOgB,MAAV,KAKTC,EAAYjB,IAAOkB,GAAV,KAgBTC,EAAe,SAAAC,GACjB,IAAIC,EAAWD,EAAEE,OAAOC,aAAa,QACrCC,QAAQC,IAAIJ,GACZK,EAAWC,EAAQC,QAAO,SAACC,GAAD,OAAWA,IAAUR,OApFxC,EAuFmBS,mBAAS,IAvF5B,mBAuFJH,EAvFI,KAuFKD,EAvFL,KAyFX,OACI,kBAAC3B,EAAD,CAAcgC,UAAU,OACpB,kBAAC7B,EAAD,KACI,kBAACK,EAAD,CAAOyB,GAAG,cACV,kBAAC7B,EAAD,CAAQ8B,QAtBF,WACd,IAAIC,EAAO,IAAIC,KACXN,EAAQ,CACRO,UAAU,GAAD,OAAKF,EAAKG,UAAV,YAAuBH,EAAKI,WAA5B,YAA0CJ,EAAKK,cAA/C,YAAgEL,EAAKM,WAArE,YAAmFN,EAAKO,cACjGC,SAAUC,SAASC,eAAe,aAAaC,MAC/CC,OAAQ,eAEZpB,EAAW,GAAD,mBAAKC,GAAL,CAAcE,OAehB,QAGJ,kBAAC3B,EAAD,KACI,kBAACO,EAAD,CAAasC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC/B,kBAAClC,EAAD,KACI,kBAACJ,EAAD,KACI,kBAACE,EAAD,mBACA,kBAACA,EAAD,aACA,kBAACA,EAAD,eACA,kBAACA,EAAD,iBAGR,+BACKc,EAAQuB,KAAI,SAAArB,GAAK,OACd,kBAAClB,EAAD,KACI,kBAACM,EAAD,KAAYY,EAAMO,WAClB,kBAACnB,EAAD,KAAYY,EAAMa,UAClB,kBAACzB,EAAD,KAAYY,EAAMiB,QAClB,kBAAC7B,EAAD,KACI,kBAACd,EAAD,CAAQgD,KAAMtB,EAAOI,QAASd,GAA9B,oB,QC1GhBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,IAAwB,kBAAE,EAAF,OAAmBjB,SAASC,eAAe,SD4H/F,kBAAmBiB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.b4775934.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport Table from 'react-bootstrap/Table'\nimport './App.css';\n\nfunction App() {\n\n    const AppContainer = styled.div`\n        background: #282A36;\n        color: #BD93F9;\n        min-height: 100vh;\n    `\n\n    const Row = styled.div`\n        display: flex;\n        min-width: 100vw;\n        align-items: center;\n        justify-content: center;\n    `\n\n    const Button = styled.button`\n        background: ${props => props.active ? \"#BD93F9\" : \"inherit\"};\n        color: ${props => props.active ? \"inherit\" : \"#BD93F9\"};\n        &:hover {\n            background: #BD93F9;\n            color: #282A36;\n        }\n        font-size: 1em;\n        margin: 1em;\n        padding: 0.25em 1em;\n        border: 2px solid #BD93F9;\n        border-radius: 3px;\n    `\n\n    const Input = styled.input`\n        font-size: 1em;\n        margin: 1em;\n        padding: 0.25em;\n        border: 2px solid #BD93F9;\n        border-radius: 3px;\n    `\n\n    const StyledTable = styled(Table)`\n        text-align: left;\n        font-size: 1em;\n        margin: 1em;\n        padding: 0.25em;\n        border: 2px solid #BD93F9;\n        border-radius: 3px;\n        min-width: 40vw;\n    `\n\n    const TableRow = styled.tr`\n        margin: 1em;\n        padding: 0.25em;\n        border: 2px solid #BD93F9;\n        border-radius: 3px;\n    `\n\n    const TableHeader = styled.th`\n        padding: 1em 3em;\n        border-bottom: 2px solid #BD93F9;\n        text-align: center;\n    `\n\n    const TableHead = styled.thead`\n        border: 2px solid #BD93F9;\n        color: #50FA7B;\n    `\n\n    const TableDesc = styled.td`\n        padding: 1em 3em;\n        text-align: center;\n        color: #50FA7B;\n    `\n\n    const handleAdd = () => {\n        let date = new Date()\n        let entry = {\n            dateAdded: `${date.getDate()}/${date.getMonth()}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`,\n            taskName: document.getElementById('taskInput').value,\n            status: \"in-progress\"\n        }\n        setEntries([...entries, entry])\n    }\n\n    const handleRemove = e => {\n        let toRemove = e.target.getAttribute(\"name\")\n        console.log(toRemove)\n        setEntries(entries.filter((entry) => entry !== toRemove))\n    }\n\n    const [entries, setEntries] = useState([])\n\n    return (\n        <AppContainer className=\"App\">\n            <Row>\n                <Input id=\"taskInput\" />\n                <Button onClick={handleAdd\n                }>Add</Button>\n            </Row>\n            <Row>\n                <StyledTable striped bordered hover>\n                    <TableHead>\n                        <TableRow>\n                            <TableHeader>Date Added</TableHeader>\n                            <TableHeader>Task</TableHeader>\n                            <TableHeader>Status</TableHeader>\n                            <TableHeader>Action</TableHeader>\n                        </TableRow>\n                    </TableHead>\n                    <tbody>\n                        {entries.map(entry =>\n                            <TableRow>\n                                <TableDesc>{entry.dateAdded}</TableDesc>\n                                <TableDesc>{entry.taskName}</TableDesc>\n                                <TableDesc>{entry.status}</TableDesc>\n                                <TableDesc>\n                                    <Button name={entry} onClick={handleRemove}>Remove</Button>\n                                </TableDesc>\n                            </TableRow>\n                        )}\n                    </tbody>\n                </StyledTable>\n            </Row>\n        </AppContainer>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}